"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
# question is asking for sum of those values that don't exceed 4 million and are even.

from functools import lru_cache
import time

@lru_cache(maxsize=1000)
# apparently, the more I increase the cache size the faster the code runs.

def fibonacci(n):
    """ Generates the fibonacci sequence for given range of numbers. """
    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n > 2:
        return fibonacci(n-1) + fibonacci(n-2)

start_time = time.time()

evens = []
for i in range(1, 40):
    # range 40 was enough
    if fibonacci(i) < 4000000 and fibonacci(i) % 2 == 0:
        evens.append(fibonacci(i))
    else:
        i += 1

print(f"The required sum of the even-valued terms is {sum(evens)}.")

print(f"[Program finished in {time.time() - start_time} seconds.]")
        

